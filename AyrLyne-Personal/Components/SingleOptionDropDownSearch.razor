@using AyrLyne_Personal.Components.CompenentModels
<style>
    .invisibleDropDownPrompt {
        display: none;
        overflow: hidden;
        position: absolute;
    }

    .visibleDropDownPrompt {
        display: block;
        width: 200px;
        max-height: 6rem;
        overflow: hidden;
        position: absolute;
        background-color: white;
        border-style: ridge;
        overflow-y: auto
    }

    .DropDownOption {
        display: flex;
        width: 200px;
        height: 1.2rem;
        overflow: hidden;
        white-space: nowrap;
        text-overflow: ellipsis;
    }

    .selectedItems {
        display: flex;
        width: 300px;
        min-height: 3.6rem;
        border-style: inset;
        padding: 5px;
        flex-wrap: wrap;
    }

    .selectedItem {
        max-width: 90px;
        max-height: 1.5rem;
        display: flex;
        border-style: outset;
        align-items: center;
        margin: 2px;
    }

        .selectedItem p {
            margin: 0;
        }
</style>

<input @bind="@inputValue" runat="server" @onkeyup="@((e) => filterSearch(e))" />
<div class="@GetPromptClass()" @onmouseover="() => mouseStatusUpdate(true)" @onmouseout="() => mouseStatusUpdate(false)">
    @foreach (DropDownDataModel dddm in filteredDropDrownModels)
    {
        <div class="DropDownOption" @onclick="(() => selectItem(dddm))">
            @if (dddm.attribute2 == null)
            {
                <p>@dddm.attribute1</p>
            }
            else
            {
                <p>@dddm.attribute2  </p>
                <p> | </p>
                <p>@dddm.attribute1</p>
            }

        </div>
    }
</div>
<div class="selectedItem">
    @if (selectedDropDownModel.attribute2 == null)
    {
        <p>@selectedDropDownModel.attribute1</p>
    }
    else
    {
        <p>@selectedDropDownModel.attribute2</p>
    }
</div>
@code {
    [Parameter]
    public List<DropDownDataModel> dropDownDataModel { get; set; }

    [Parameter]
    public DropDownDataModel selectedDropDownModel { get; set; }

    public List<DropDownDataModel> filteredDropDrownModels = new();

    public string inputValue = "";

    private bool IsInside = false;

    public async Task filterSearch(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            if (inputValue == "")
            {
                filteredDropDrownModels = new();
            }
            else
            {

                filteredDropDrownModels = dropDownDataModel.Where(dddm => (dddm.attribute1.ToLower().Contains(inputValue.ToLower()) || ((dddm.attribute2 == null) || (dddm.attribute2.ToLower().Contains(inputValue.ToLower()))))).ToList();
            }
        }
    }

    public string GetPromptClass()
    {
        if (inputValue == "" || inputValue == null || (!IsInside && inputValue != ""))
        {
            return "invisibleDropDownPrompt";
        }
        return "visibleDropDownPrompt";
    }

    public async Task selectItem(DropDownDataModel dddm)
    {
        inputValue = dddm.attribute1;
        selectedDropDownModel =  dddm;
    }

    public void mouseStatusUpdate(bool temp){
        IsInside = temp;
    }
}
