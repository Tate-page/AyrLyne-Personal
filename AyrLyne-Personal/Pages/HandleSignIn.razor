@page "/HandleSignIn"

@using AyrLyne_Personal.Models;
@inject ISignInUser signedUser;

@using AyrLyne_Personal.Components;
@using AyrLyne_Personal.Components.CompenentModels;
@using AyrlyneAppLibrary.Models;

@using AyrlyneAppLibrary.DataAccess;
@inject IUserData userData;
@inject IRegionData regionData;
@inject IStateData stateData;
@inject IAirportData airportData;

@using System.Security.Claims;
@inject AuthenticationStateProvider _authenticationStateProvider
@inject IHttpContextAccessor _context
@inject NavigationManager navManager
@inject IJSRuntime JSRuntime
<h3>HandleSignIn</h3>
@if (doesUserExistInDB && signedUser.isLoggedIn)
{
    <button @onclick="(() => OpenHomePage())">You are now logged @signedUser.Fname. Click here to return home!</button>
}else{
    <p>It seems that this is your first time logging in, please fill out this form to finalize you login</p>
    <EditForm Model="@signInUserModel" OnValidSubmit="@HandleSubmit">

        <p>First Name:</p>
        <InputText id="Fname" @bind-Value="signInUserModel.Fname"></InputText>

        <p>Last Name:</p>
        <InputText id="Lname" @bind-Value="signInUserModel.Lname"></InputText>

        <p>Home Airport:</p>
        <InputSelect class="homeAirportSelect" @bind-Value="signInUserModel.HomeAirportID">
            @if(Airports is not null){
                <option value="" selected>None</option>
                @foreach(AirportModel port in Airports){
                    <option value="@port.AirportID">@port.AirportName (iata: @port.AirportCode)</option>
                }
            }
        </InputSelect>
        
        <!--<SingleOptionDropDownSearch dropDownDataModel="dddmAirports" selectedDropDownModel="signInUserModel.HomeAirport"></SingleOptionDropDownSearch>-->


        <button type="submit" @onclick="() => HandleSubmit()" >Sign In</button>
    </EditForm>
}

@code {
    private bool doesUserExistInDB = false;
    private SignInUserModel signInUserModel = new();
    private SignInUser tempUser = new SignInUser();
    private int stateValue = 0;
    private bool isRegionDisabled=true;
    private int regionValue = 0;
    private bool isAirportDisabled = true;
    private string Fname="";
    private string Lname = "";

    private List<AirportModel> Airports = null;
    private List<DropDownDataModel> dddmAirports = new();



    protected override async Task OnInitializedAsync()
    {
        Airports = await airportData.GetAirportsAsync();
        foreach(AirportModel port in Airports){
            DropDownDataModel dddm = new DropDownDataModel{
                id = port.AirportID,
                attribute1 = port.AirportName,
                attribute2 = port.AirportCode
            };
            dddmAirports.Add(dddm);
        }

        if (!signedUser.isLoggedIn)
        {//signedUser has not been updated to claims
            var principal = await _authenticationStateProvider.GetAuthenticationStateAsync();

            //List<AirportModel> tempList =await airportData.GetAirportsAsync();
            //tempList = tempList.Where(a => a.AirportStateID == 59).ToList();


            string tempName = _context.HttpContext.User.Claims.First(c => c.Type.Contains("name")).Value.ToString();
            tempUser.Fname = tempName.Split(" ")[0];
            tempUser.Lname = tempName.Split(" ")[1];
            tempUser.Email = _context.HttpContext.User.Claims.First(c => c.Type.Contains("email")).Value.ToString();


        }
        else
        {//signedUser has been updated to claims

        }
    }

    protected override async Task OnParametersSetAsync()
    {
        bool temp = await userData.doesUserExistByEmailAsync(tempUser.Email);

        if(!temp){

            doesUserExistInDB = false;
        }else{
            doesUserExistInDB = true;
            var temporaryUser = await userData.returnIfUserExistsAsync(tempUser.Email);
            SignInUser temporary = new SignInUser();
            temporary.Fname = temporaryUser.Fname;
            temporary.Lname = temporaryUser.Lname;
            temporary.UserID = temporaryUser.UserID;
            temporary.isAdmin = temporaryUser.isAdmin;
            signedUser.signIn(temporary);
        }
        Fname = tempUser.Fname;
        Lname = tempUser.Lname;
    }

    private void OnStateSelect(ChangeEventArgs e){
        stateValue = Int32.Parse(e.Value.ToString());
        if(stateValue == 0){
            isRegionDisabled = true;
        }else{
            isRegionDisabled = false;
        }

    }

    private void OnRegionSelect(ChangeEventArgs e){
        regionValue = Int32.Parse(e.Value.ToString());
        if(regionValue == 0){
            isAirportDisabled = true;
        }else{
            isAirportDisabled = false;
        }

    }

    private string hasStateBeenSelected(){
        if(stateValue != 0){
            return "";
        }
        return "disabled";
    }

    private async Task HandleSubmit()
    {

        string tempName = _context.HttpContext.User.Claims.First(c => c.Type.Contains("name")).Value.ToString();
        UserModel user = new();
        user.Fname = signInUserModel.Fname;
        user.Lname = signInUserModel.Lname;
        user.Email = _context.HttpContext.User.Claims.First(c => c.Type.Contains("email")).Value.ToString();
        user.HomeAirportID =  signInUserModel.HomeAirportID;
        //update DB
        UserModel model = userData.updateDB(user);
        tempUser.UserID = model.UserID;
        tempUser.HomeAirportID = model.HomeAirportID;
        signedUser.signIn(tempUser);
        doesUserExistInDB = true;
        StateHasChanged();
    }

    private void OpenHomePage()
    {
        navManager.NavigateTo("/");
    }
}
